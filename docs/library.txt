def ok() {
};
/*
object Dynamic {
    size: int;
    allocated: int;
    arr: array[int];
    def Dynamic(self: Dynamic): Dynamic {
        self.arr = array[int][128];
        self.allocated = 128;
        self.size = 0;
        return self;
    }
    def expand(self: Dynamic, req: int) {
		val total = (req + self.size);
		if(total >= self.allocated) {
			val newsize = self.allocated;
			while(newsize < (total+1)) {
				newsize = (newsize * 2);
			};
			val old = self.arr;
			val narr = array[int][newsize];
			for(val i = 0; i < self.size; i+= 1;) {
				narr[i] = old[i];
			};
			self.arr = narr;
			self.allocated = newsize;
			self.size = total;
		} else {
			self.size += req;
		};
    }
    def push(self: Dynamic, value: int) {
        self.expand(1);
        self.arr[(self.size-1)] = value;
    }
    def push(self: Dynamic, value: array[int]) {
        val oldSize = self.size;
        self.expand(value.size);

        for(val i = 0; i < value.size; i+= 1;) {
            self.arr[(i + oldSize)] = value[i];
        };
    }

	def push(self: Dynamic, value: Dynamic) {
       val oldSize = self.size;
       self.expand(value.size);

       for(val i = 0; i < value.size; i+= 1;) {
           self.arr[(i + oldSize)] = value.arr[i];
       };
    }

    def concat(self: Dynamic, other: Dynamic): Dynamic {
        val ret = self.copy();
        //ret.print_arr();
        ret.push(other);
        return ret;
    }
    //filter
    def get(self: Dynamic, index: int): int {
        if(index >= self.size) {
            throw exception("index out of bounds");
        };
        return self.arr[index];
    }
    def print_arr(self: Dynamic) {
        //print(self.size);

        for(val i = 0; i < self.size; i+= 1;) {
            //print(i);
            //print(" ");
            //print(self.arr[i]);
            //print(self.size);
            //print("l");
        };

        //print(self.size);
        //print("\n");
    }
    def copy(self: Dynamic): Dynamic {
        val arr_new = new Dynamic();
        for(val i = 0; i < self.size; i+= 1;) {
           //arr_new.push(self.arr[i]);
        };
        return arr_new;
    }
    def compare(self: Dynamic, other: Dynamic): bool {
        val same: bool = true;
        //if(self.size != other.size) {return false;};
        for(val i = 0; i < self.size; i+= 1;) {
            if(self.get(i) != other.get(i)) {same = false;};
        };
        return same;
    }
    def __add__(self: Dynamic, other: Dynamic): Dynamic {
        return self.concat(other);
    }
    def __print__(self: Dynamic) {
        self.print_arr();
    }
    def not_useful() {
        print("not useful, you're dumb");
    }

}
*/