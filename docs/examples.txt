//recursive fibonacci
def fib(n: int): int {
  if(n <= 1) {return n;};
  return (fib((n-1)) + fib((n-2)));
}


//dynamic array implementation
object Dynamic {
    size: int;
    allocated: int;
    arr: array[int];
    def Dynamic(self: Dynamic) {
        self.arr = array[int][2];
        self.allocated = 2;
        self.size = 0;
    }
    def push(self: Dynamic, value: int) {
        self.arr[self.size] = value;
        self.size += 1;
        if(self.allocated == self.size) {
            val newsize = (self.allocated * 2);
            val old = self.arr;
            self.arr = array[int][newsize];
            for(val i = 0; i < self.size; i+= 1;) {
                self.arr[i] = old[i];
            };
            self.allocated = newsize;
        };
    }
    def get(self: Dynamic, index: int): int {
        if(index >= self.size) {
            print("can not do that");
            throw exception;
        };
        return self.arr[index];
    }
    def print_arr(self: Dynamic) {
        for(val i = 0; i < self.size; i+= 1;) {
            print(self.arr[i]);
        };
    }
    def compare(self: Dynamic, other: Dynamic): bool {
        val same: bool = true;
        if(self.size != other.size) {return false;};
        for(val i = 0; i < self.size; i+= 1;) {
            if(self.get(i) != other.get(i)) {same = false;};
        };
        return same;
    }
}